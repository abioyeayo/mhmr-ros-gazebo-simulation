
First install ROS 2 (Humble Hawksbill) and Gazebo Fortress (Ignition Fortress) LTS installation on Ubuntu 22.04.3 LTS (Jammy Jellyfish)


$ git clone https://github.com/PX4/PX4-Autopilot.git --recursive

$ bash ./PX4-Autopilot/Tools/setup/ubuntu.sh

$ cd /path/to/PX4-Autopilot

$ make px4_sitl gz_x500


If error:
 - $ make distclean
 - remove "g++--multilib\" and "gcc--multilib\" from "ubuntu.sh" file rerun the bash... cd.. and make... commands.
------

$ commander takeoff

In new terminal, navigate to heartbeat folder if no QGroundControl or any ground control station (GCS) started, and start heartbeat
$ python3 gcs_heartbeat.py

$ mavlink start -x -u 14550 -f -p -t 10.5.3.80

ROS2 integration setup
-----------------------
Install PX4:

cd
git clone https://github.com/PX4/PX4-Autopilot.git --recursive
bash ./PX4-Autopilot/Tools/setup/ubuntu.sh
cd PX4-Autopilot/
make px4_sitl


Install ROS 2:

sudo apt update && sudo apt install locales
sudo locale-gen en_US en_US.UTF-8
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
export LANG=en_US.UTF-8
sudo apt install software-properties-common
sudo add-apt-repository universe
sudo apt update && sudo apt install curl -y
sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
sudo apt update && sudo apt upgrade -y
sudo apt install ros-humble-desktop
sudo apt install ros-dev-tools
source /opt/ros/humble/setup.bash && echo "source /opt/ros/humble/setup.bash" >> .bashrc


Setup Micro XRCE-DDS Agent & Client

$ cd ~/PX4
$ pip install --user -U empy==3.3.4 pyros-genmsg setuptools
$ git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
$ cd Micro-XRCE-DDS-Agent
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
$ sudo ldconfig /usr/local/lib/

$ MicroXRCEAgent udp4 -p 8888

In a new terminal
$ make px4_sitl gz_x500


Build ROS 2 Workspace (in new terminal)

$ mkdir -p ~/ws_sensor_combined/src/
$ cd ~/ws_sensor_combined/src/

$ git clone https://github.com/PX4/px4_msgs.git
$ git clone https://github.com/PX4/px4_ros_com.git

$ cd ..
$ source /opt/ros/humble/setup.bash
$ colcon build


for packaging<24.0 run the following otherwise it would generate a build error: "TypeError: canonicalize_version() got an unexpected keyword argument 'strip_trailing_zero'"

$ pip install -U packaging

then re-run 
$ colcon build


Running the Example (in a new terminal)

$ cd ~/ws_sensor_combined/
$ source /opt/ros/humble/setup.bash

$ source install/local_setup.bash

$ ros2 launch px4_ros_com sensor_combined_listener.launch.py



Multi-Vehicle Simulation with Gazebo
---------------------
https://docs.px4.io/main/en/sim_gazebo_gz/multi_vehicle_simulation.html

$ cd /path/to/PX4-Autopilot

$ make px4_sitl

$ PX4_SYS_AUTOSTART=4001 PX4_SIM_MODEL=gz_x500 ./build/px4_sitl_default/bin/px4 -i 1

$ PX4_SYS_AUTOSTART=4001 PX4_GZ_MODEL_POSE="0,1" PX4_SIM_MODEL=gz_x500 ./build/px4_sitl_default/bin/px4 -i 2

$ PX4_SYS_AUTOSTART=4001 PX4_GZ_MODEL_POSE="0,2" PX4_SIM_MODEL=gz_x500 ./build/px4_sitl_default/bin/px4 -i 3



Multi-Vehicle Simulation with JMAVSim
---------------------
https://docs.px4.io/main/en/sim_jmavsim/multi_vehicle.html

Navigate to PX4-Autopilot folder
$ cd /path/to/PX4-Autopilot

Build PX4
$ make px4_sitl_default

Run sitl_multiple_run.sh, specifying the number of instances to start (e.g. 2):
$ ./Tools/sitl_multiple_run.sh 2

Start the first instance in the same terminal (this will run in the foreground):
$ ./Tools/simulation/jmavsim/jmavsim_run.sh -l

Open a new terminal for each subsequent instance, specifying the simulation TCP port for the instance:
$ ./Tools/simulation/jmavsim/jmavsim_run.sh -p 4560 -l

The port should be set to 4560+i where i iterates for each instance (from 0 to N-1)
